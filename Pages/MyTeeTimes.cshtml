@page
@model GolfBAIST.Pages.MyTeeTimesModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var basePath = HttpContextAccessor.HttpContext?.Request.PathBase.Value ?? "";
    ViewData["Title"] = "My Tee Times";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<input type="hidden" name="__RequestVerificationToken" id="requestVerificationToken" value="@Antiforgery.GetTokens(HttpContext).RequestToken" />

<h2 class="mb-4">My Tee Times</h2>

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-success text-center" id="statusMessage">@Model.StatusMessage</div>
}

<ul class="nav nav-tabs" id="teeTimeTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <a class="nav-link @(Model.Tab == "regular" ? "active" : "")" id="regular-tab" data-toggle="tab" href="#regular" role="tab">Regular Tee Times</a>
    </li>
    <li class="nav-item" role="presentation">
        <a class="nav-link @(Model.Tab == "standing" ? "active" : "")" id="standing-tab" data-toggle="tab" href="#standing" role="tab">Standing Tee Times</a>
    </li>
</ul>

<form method="get" class="mb-3">
    <div class="input-group">
        <input type="text" name="SearchTerm" class="form-control" placeholder="Search by date, phone, name..." value="@Model.SearchTerm" />
        <input type="hidden" name="tab" id="activeTabInput" value="@Model.Tab" />
        <button class="btn btn-primary" type="submit">🔍 Search</button>
    </div>
</form>

<div class="tab-content mt-3" id="teeTimeTabsContent">
    <div class="tab-pane fade @(Model.Tab == "regular" ? "show active" : "")" id="regular" role="tabpanel">
        <div class="table-responsive">
            @if (Model.TeeTimes != null && Model.TeeTimes.Any())
            {
                <div class="teetime-cards-container">
                    @foreach (var teeTime in Model.TeeTimes)
                    {
                        <div class="teetime-card">
                            <div class="card-header">
                                <span class="date-badge">@teeTime.Date.ToString("MMM dd")</span>
                                <span class="time-range">@teeTime.StartTime.ToString("hh\\:mm") - @teeTime.EndTime.ToString("hh\\:mm")</span>
                            </div>
                            
                            <div class="card-body">
                                <div class="card-row">
                                    <div class="info-item">
                                        <strong>👨‍💼 Employee</strong>
                                        @teeTime.EmployeeName
                                    </div>
                                    <div class="info-item">
                                        <strong>⛳ Players (@teeTime.Players)</strong>
                                        @if (teeTime.AdditionalMemberIDs.Any(id => id != 0))
                                        {
                                            <div style="margin-top: 4px; font-size: 0.9em; color: #666;">
                                                @foreach (var memberId in teeTime.AdditionalMemberIDs.Where(id => id != 0))
                                                {
                                                    string name;
                                                    <span>@(Model.MemberNames.TryGetValue(memberId, out name) ? name : "Unknown")</span>
                                                    @if (memberId != teeTime.AdditionalMemberIDs.Where(id => id != 0).Last())
                                                    {
                                                        <span>, </span>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="info-item">
                                        <strong>� Carts</strong>
                                        @teeTime.Carts
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card-actions">
                                @if (teeTime.ScoreID.HasValue)
                                {
                                    <a href="@($"{basePath}/ViewScoreSheet?scoreID={teeTime.ScoreID}")" class="btn btn-sm btn-info">📊 View Score</a>
                                }
                                
                                @if (teeTime.MemberID == Model.LoggedInMemberID || Model.Role == "Employee")
                                {
                                    <button type="button" class="btn btn-sm btn-danger" onclick="cancelTeeTime(@teeTime.TeeTimeID, this)">❌ Cancel</button>
                                    <a href="@($"{basePath}/ModifyTeeTime/{teeTime.TeeTimeID}")" class="btn btn-sm btn-success">✏️ Edit</a>
                                }
                                else if (teeTime.AdditionalMemberIDs.Contains(Model.LoggedInMemberID.GetValueOrDefault()))
                                {
                                    <form method="post" asp-page-handler="LeaveTeeTime" asp-route-id="@teeTime.TeeTimeID" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-warning">🚪 Leave</button>
                                    </form>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-secondary" disabled>No Actions</button>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Page @Model.CurrentPage of @Model.TotalPages
                    </div>
                    <div>
                        <form method="get" asp-page="./MyTeeTimes" class="d-inline">
                            <input type="hidden" name="p" value="@(Model.CurrentPage - 1)" />
                            <button class="btn btn-outline-primary btn-sm" type="submit" @(Model.CurrentPage == 1 ? "disabled" : "")>Previous</button>
                        </form>
                        
                        <span style="display: inline-block; width: 20px;"></span>

                        <form method="get" asp-page="./MyTeeTimes" class="d-inline">
                            <input type="hidden" name="p" value="@(Model.CurrentPage + 1)" />
                            <button class="btn btn-outline-primary btn-sm" type="submit" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Next</button>
                        </form>
                    </div>
                </div>
            }
            else
            {
                <p>No regular tee times found.</p>
            }
        </div>
    </div>

    <div class="tab-pane fade @(Model.Tab == "standing" ? "show active" : "")" id="standing" role="tabpanel">
        @if (Model.StandingTeeTimes != null && Model.StandingTeeTimes.Any())
        {
            <div class="teetime-cards-container">
                @foreach (var s in Model.StandingTeeTimes)
                {
                    <div class="teetime-card">
                        <div class="card-header">
                            <span class="date-badge">@s.RequestedDayOfWeek</span>
                            <span class="time-range">@s.RequestedStartTime.ToString("hh\\:mm") - @s.RequestedEndTime.ToString("hh\\:mm")</span>
                        </div>
                        
                        <div class="card-body">
                            <div class="card-row">
                                <div class="info-item">
                                    <strong>📅 Start Date</strong>
                                    @s.StartDate.ToShortDateString()
                                </div>
                                <div class="info-item">
                                    <strong>⛳ Players</strong>
                                    @{
                                        var playerCount = new[] { s.AdditionalPlayer1ID, s.AdditionalPlayer2ID, s.AdditionalPlayer3ID }.Count(i => i.HasValue && i.Value != 0) + 1;
                                    }
                                    (@playerCount)
                                    @{
                                        var ids = new[] { s.AdditionalPlayer1ID, s.AdditionalPlayer2ID, s.AdditionalPlayer3ID };
                                        var hasPlayers = ids.Any(i => i.HasValue && i.Value != 0);
                                    }
                                    @if (hasPlayers)
                                    {
                                        <div style="margin-top: 4px; font-size: 0.9em; color: #666;">
                                            @foreach (var id in ids.Where(i => i.HasValue && i.Value != 0))
                                            {
                                                string name;
                                                <span>@(Model.MemberNames.TryGetValue(id.Value, out name) ? name : "Unknown")</span>
                                                @if (id != ids.Where(i => i.HasValue && i.Value != 0).Last())
                                                {
                                                    <span>, </span>
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="info-item">
                                    <strong>📅 End Date</strong>
                                    @s.EndDate.ToShortDateString()
                                </div>
                            </div>
                        </div>
                        
                        <div class="card-actions">
                            @if (s.CancellationRequested)
                            {
                                <button class="btn btn-secondary btn-sm" disabled>Request Sent</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-sm btn-danger" onclick="cancelStanding(@s.RequestID, this)">❌ Cancel</button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No standing tee times found.</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        const basePath = "@basePath";

        function cancelStanding(requestId, button) {
            const token = document.getElementById("requestVerificationToken").value;

            fetch(basePath + '/MyTeeTimes?handler=RequestStandingCancellation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ id: requestId })
            })
            .then(res => res.json())
            .then(result => {
                if (result.success) {
                    button.disabled = true;
                    button.innerText = 'Request Sent';
                    button.classList.remove('btn-mytee-cancel');
                    button.classList.add('btn', 'btn-secondary', 'btn-sm', 'w-100');

                    const msgBox = document.getElementById("statusMessage");
                    if (msgBox) {
                        msgBox.innerText = '✅ Standing tee time cancellation request sent.';
                        msgBox.classList.remove('alert-info', 'alert-danger');
                        msgBox.classList.add('alert-success', 'text-center');
                    }
                } else {
                    alert(result.message || "Cancellation failed.");
                }
            })
            .catch(() => alert("Something went wrong while sending the standing cancellation request."));
        }

        function cancelTeeTime(teeTimeId, button) {
            const token = document.getElementById("requestVerificationToken").value;

            fetch(basePath + '/MyTeeTimes?handler=RequestCancellation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ id: teeTimeId })
            })
            .then(res => res.json())
            .then(result => {
                if (result.success) {
                    button.disabled = true;
                    button.innerText = 'Request Sent';
                    button.classList.remove('btn-mytee-cancel');
                    button.classList.add('btn-secondary');

                    const msgBox = document.getElementById("statusMessage");
                    if (msgBox) {
                        msgBox.innerText = '✅ Tee time cancellation request sent.';
                        msgBox.classList.remove('alert-info', 'alert-danger');
                        msgBox.classList.add('alert-success', 'text-center');
                    }
                } else {
                    alert("Cancellation failed.");
                }
            })
            .catch(() => alert("Something went wrong while sending the request."));
        }

        document.addEventListener("DOMContentLoaded", function () {
            const hash = window.location.hash;
            if (hash) {
                const tabTrigger = document.querySelector(`a[href="${hash}"]`);
                if (tabTrigger) new bootstrap.Tab(tabTrigger).show();
            }

            // Update search form based on active tab
            function updateActiveTab() {
                const activeTab = document.querySelector('.tab-pane.active');
                const tabInput = document.getElementById('activeTabInput');
                if (activeTab && tabInput) {
                    tabInput.value = activeTab.id;
                }
            }

            // Listen for tab changes
            document.querySelectorAll('[data-toggle="tab"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', updateActiveTab);
            });

            // Update on page load
            updateActiveTab();
        });

        document.querySelectorAll("form[method='get']").forEach(form => {
            form.addEventListener("submit", function () {
                const tabPane = document.querySelector(".tab-pane.active");
                if (tabPane && tabPane.id) {
                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = "anchor";
                    input.value = tabPane.id;
                    form.appendChild(input);
                }
            });
        });
    </script>
}
