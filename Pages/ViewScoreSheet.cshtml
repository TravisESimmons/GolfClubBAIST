@page
@model GolfBAIST.Pages.ViewScoreSheetModel
@{
    ViewData["Title"] = "Enter Score";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    return;
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-11">
            
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">📊 Scorecard Entry</h2>
                <div class="scorecard-summary d-none d-lg-flex align-items-center">
                    <span class="badge badge-info mr-2">Total: <span id="totalScore">0</span></span>
                    <span class="badge badge-secondary">Par: 72</span>
                </div>
            </div>

            <form method="post" asp-page-handler="SubmitScore" class="bg-white p-4 rounded shadow-sm">
                <input type="hidden" name="ScoreID" value="@Model.Score?.ScoreID" />

                <!-- Course Setup Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">🏌️ Course Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-3 col-md-6 mb-3">
                                <label for="globalTeeBox" class="font-weight-bold">Set Tee Box for All Holes:</label>
                                <select id="globalTeeBox" class="form-control form-control-sm" onchange="setAllTeeBoxes(this.value)">
                                    <option value="Red">🔴 Red Tees</option>
                                    <option value="White" selected>⚪ White Tees</option>
                                    <option value="Blue">🔵 Blue Tees</option>
                                </select>
                            </div>

                            <div class="col-lg-3 col-md-6 mb-3">
                                <label for="courseName" class="font-weight-bold">Course Name:</label>
                                <select id="courseName" name="CourseNameInput" class="form-control form-control-sm" onchange="updateCourseInfo(this.value)" required>
                                    <option value="Club BAIST National" selected>Club BAIST National</option>
                                    <option value="Spruce Meadows">Spruce Meadows</option>
                                    <option value="Rocky Ridge">Rocky Ridge</option>
                                </select>
                            </div>

                            <div class="col-lg-3 col-md-6 mb-3">
                                <label for="courseRating" class="font-weight-bold">Course Rating:</label>
                                <input type="number" step="0.1" id="courseRating" name="CourseRating" class="form-control form-control-sm" readonly
                                       value="@Model.Score?.CourseRating ?? 72.3M" />
                            </div>

                            <div class="col-lg-3 col-md-6 mb-3">
                                <label for="slopeRating" class="font-weight-bold">Slope Rating:</label>
                                <input type="number" id="slopeRating" name="SlopeRating" class="form-control form-control-sm" readonly
                                       value="@Model.Score?.SlopeRating ?? 128" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Scorecard Table -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">⛳ Scorecard</h5>
                        <div class="d-flex align-items-center">
                            <small class="mr-3">Front 9: <span id="front9Total">0</span></small>
                            <small>Back 9: <span id="back9Total">0</span></small>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="scorecard-scroll">
                            <table class="table table-sm table-hover mb-0">
                                <thead class="thead-dark sticky-top">
                                    <tr>
                                        <th class="text-center" style="width: 8%;">Hole</th>
                                        <th class="text-center" style="width: 8%;">Par</th>
                                        <th class="text-center" style="width: 15%;">Tee Box</th>
                                        <th class="text-center" style="width: 15%;">Strokes</th>
                                        <th class="text-center d-none d-md-table-cell" style="width: 12%;">+/-</th>
                                        <th class="text-center d-none d-lg-table-cell" style="width: 42%;">Quick Entry</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 1; i <= 18; i++)
                                    {
                                        var holeClass = i == 9 ? "border-bottom border-primary" : (i == 18 ? "border-bottom border-success" : "");
                                        <tr class="@holeClass" data-hole="@i">
                                            <td class="text-center font-weight-bold align-middle">
                                                @if (i == 10)
                                                {
                                                    <span class="badge badge-warning">@i</span>
                                                }
                                                else
                                                {
                                                    @i
                                                }
                                            </td>
                                            <td class="text-center align-middle">
                                                <input type="number" name="Par[@i]" value="@Model.GetPar(i)"
                                                       readonly class="form-control form-control-sm text-center border-0" 
                                                       style="background: transparent; font-weight: bold;" />
                                            </td>
                                            <td class="text-center align-middle">
                                                <select name="TeeBox[@i]" class="form-control form-control-sm tee-box-select">
                                                    <option value="Red">🔴</option>
                                                    <option value="White" selected>⚪</option>
                                                    <option value="Blue">🔵</option>
                                                </select>
                                            </td>
                                            <td class="text-center align-middle">
                                                <input type="number" name="StrokesInput[@(i - 1)]" id="strokes_@i"
                                                       value="@((Model.Strokes.ContainsKey(i)) ? Model.Strokes[i] : 0)"
                                                       required min="1" max="20" 
                                                       class="form-control form-control-sm text-center stroke-input" 
                                                       data-hole="@i" data-par="@Model.GetPar(i)"
                                                       onchange="updateScoreCalculations()" />
                                            </td>
                                            <td class="text-center align-middle d-none d-md-table-cell">
                                                <span id="diff_@i" class="badge badge-secondary">-</span>
                                            </td>
                                            <td class="text-center align-middle d-none d-lg-table-cell">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    @for (int j = 1; j <= 8; j++)
                                                    {
                                                        <button type="button" class="btn btn-outline-primary quick-score" 
                                                                data-hole="@i" data-score="@j">@j</button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="thead-light">
                                    <tr class="font-weight-bold">
                                        <td class="text-center">Total</td>
                                        <td class="text-center">72</td>
                                        <td class="text-center">-</td>
                                        <td class="text-center">
                                            <span id="grandTotal" class="badge badge-primary badge-lg">0</span>
                                        </td>
                                        <td class="text-center d-none d-md-table-cell">
                                            <span id="totalDiff" class="badge badge-secondary badge-lg">E</span>
                                        </td>
                                        <td class="d-none d-lg-table-cell"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Game Statistics and Actions -->
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">📈 Round Statistics</h6>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-6 col-md-3">
                                        <div class="stat-box">
                                            <h5 id="birdieCount" class="text-success">0</h5>
                                            <small>🐦 Birdies</small>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-3">
                                        <div class="stat-box">
                                            <h5 id="parCount" class="text-primary">0</h5>
                                            <small>📍 Pars</small>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-3">
                                        <div class="stat-box">
                                            <h5 id="bogeyCount" class="text-warning">0</h5>
                                            <small>⚠️ Bogeys</small>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-3">
                                        <div class="stat-box">
                                            <h5 id="doubleCount" class="text-danger">0</h5>
                                            <small>❌ Double+</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <label class="font-weight-bold">Date Played:</label>
                                        <input type="date" class="form-control form-control-sm" name="DatePlayed"
                                               value="@Model.DatePlayed.ToString("yyyy-MM-dd")" readonly />
                                    </div>
                                    <div class="col-md-6 d-flex align-items-end">
                                        <div class="text-muted">
                                            <small>Differential: <span id="handicapDiff" class="font-weight-bold">--</span></small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-lg-4">
                        <div class="card h-100">
                            <div class="card-body d-flex flex-column justify-content-center">
                                <button type="submit" class="btn btn-success btn-lg btn-block mb-3">
                                    <i class="fas fa-check-circle"></i> ✅ Submit Score
                                </button>
                                <a class="btn btn-outline-secondary btn-block" href="/MyTeeTimes">
                                    <i class="fas fa-arrow-left"></i> ⬅ Back to My Tee Times
                                </a>
                                <button type="button" class="btn btn-outline-info btn-block mt-2" onclick="clearAllScores()">
                                    🔄 Clear All Scores
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const courseInfo = {
            "Club BAIST National": { rating: 72.3, slope: 128 },
            "Spruce Meadows": { rating: 69.8, slope: 122 },
            "Rocky Ridge": { rating: 74.1, slope: 134 }
        };

        // Modern DOM ready using vanilla JS
        document.addEventListener("DOMContentLoaded", function() {
            const selected = document.getElementById("courseName").value;
            updateCourseInfo(selected);
            updateScoreCalculations();
            initializeQuickScore();
        });

        function setAllTeeBoxes(value) {
            document.querySelectorAll('.tee-box-select').forEach(select => {
                select.value = value;
            });
        }

        function updateCourseInfo(courseName) {
            const info = courseInfo[courseName];
            if (info) {
                document.getElementById("courseRating").value = info.rating;
                document.getElementById("slopeRating").value = info.slope;
                updateScoreCalculations();
            }
        }

        function updateScoreCalculations() {
            let totalScore = 0;
            let front9 = 0;
            let back9 = 0;
            let birdies = 0, pars = 0, bogeys = 0, doubles = 0;

            // Calculate scores and statistics
            for (let i = 1; i <= 18; i++) {
                const strokeInput = document.getElementById(`strokes_${i}`);
                const diffSpan = document.getElementById(`diff_${i}`);
                
                if (strokeInput && strokeInput.value) {
                    const strokes = parseInt(strokeInput.value) || 0;
                    const par = parseInt(strokeInput.dataset.par) || 4;
                    const diff = strokes - par;
                    
                    totalScore += strokes;
                    
                    if (i <= 9) {
                        front9 += strokes;
                    } else {
                        back9 += strokes;
                    }

                    // Update difference display
                    if (diffSpan) {
                        if (diff === 0) {
                            diffSpan.textContent = 'E';
                            diffSpan.className = 'badge badge-primary';
                            pars++;
                        } else if (diff === -1) {
                            diffSpan.textContent = '-1';
                            diffSpan.className = 'badge badge-success';
                            birdies++;
                        } else if (diff === 1) {
                            diffSpan.textContent = '+1';
                            diffSpan.className = 'badge badge-warning';
                            bogeys++;
                        } else if (diff >= 2) {
                            diffSpan.textContent = `+${diff}`;
                            diffSpan.className = 'badge badge-danger';
                            doubles++;
                        } else if (diff < -1) {
                            diffSpan.textContent = `${diff}`;
                            diffSpan.className = 'badge badge-success';
                            birdies++;
                        }
                    }
                }
            }

            // Update display elements
            document.getElementById("front9Total").textContent = front9;
            document.getElementById("back9Total").textContent = back9;
            document.getElementById("grandTotal").textContent = totalScore;
            document.getElementById("totalScore").textContent = totalScore;
            
            // Update total difference
            const totalDiff = totalScore - 72;
            const totalDiffSpan = document.getElementById("totalDiff");
            if (totalDiffSpan) {
                if (totalDiff === 0) {
                    totalDiffSpan.textContent = 'E';
                    totalDiffSpan.className = 'badge badge-primary badge-lg';
                } else if (totalDiff > 0) {
                    totalDiffSpan.textContent = `+${totalDiff}`;
                    totalDiffSpan.className = 'badge badge-warning badge-lg';
                } else {
                    totalDiffSpan.textContent = `${totalDiff}`;
                    totalDiffSpan.className = 'badge badge-success badge-lg';
                }
            }

            // Update statistics
            document.getElementById("birdieCount").textContent = birdies;
            document.getElementById("parCount").textContent = pars;
            document.getElementById("bogeyCount").textContent = bogeys;
            document.getElementById("doubleCount").textContent = doubles;

            // Calculate handicap differential
            const courseRating = parseFloat(document.getElementById("courseRating").value) || 72.3;
            const slopeRating = parseInt(document.getElementById("slopeRating").value) || 128;
            
            if (totalScore > 0) {
                const differential = ((totalScore - courseRating) * 113) / slopeRating;
                document.getElementById("handicapDiff").textContent = differential.toFixed(1);
            }
        }

        function initializeQuickScore() {
            document.querySelectorAll('.quick-score').forEach(button => {
                button.addEventListener('click', function() {
                    const hole = this.dataset.hole;
                    const score = this.dataset.score;
                    const strokeInput = document.getElementById(`strokes_${hole}`);
                    
                    if (strokeInput) {
                        strokeInput.value = score;
                        updateScoreCalculations();
                        
                        // Visual feedback
                        this.classList.add('btn-primary');
                        this.classList.remove('btn-outline-primary');
                        
                        // Reset other buttons in the same group
                        const siblings = this.parentElement.querySelectorAll('.quick-score');
                        siblings.forEach(sibling => {
                            if (sibling !== this) {
                                sibling.classList.remove('btn-primary');
                                sibling.classList.add('btn-outline-primary');
                            }
                        });
                    }
                });
            });
        }

        function clearAllScores() {
            if (confirm('Are you sure you want to clear all scores? This action cannot be undone.')) {
                document.querySelectorAll('.stroke-input').forEach(input => {
                    input.value = '';
                });
                
                document.querySelectorAll('.quick-score').forEach(button => {
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-outline-primary');
                });
                
                updateScoreCalculations();
            }
        }

        // Auto-save functionality (optional)
        let autoSaveTimer;
        function scheduleAutoSave() {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                // Could implement auto-save to localStorage here
                console.log('Auto-save triggered');
            }, 30000); // 30 seconds
        }

        // Add event listeners to stroke inputs
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.stroke-input').forEach(input => {
                input.addEventListener('input', function() {
                    updateScoreCalculations();
                    scheduleAutoSave();
                });
            });
        });
    </script>
}
