@page
@model GolfBAIST.Pages.EmployeePortalModel

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var basePath = HttpContextAccessor.HttpContext?.Request.PathBase.Value ?? "";
    ViewData["Title"] = "Employee Portal";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var activeTab = Model.ActiveTab ?? "manage";
}
<link rel="stylesheet" href="~/css/employee-portal-modern.css" />

<div class="container mt-5 mb-5">
    <h2 class="mb-4 text-center">Employee Portal</h2>

    @if (TempData["StatusMessage"] != null)
    {
        <div class="alert alert-success text-center">
            @TempData["StatusMessage"]
        </div>
    }


    <div class="alert alert-primary mb-4">
        <strong>Welcome @Model.FullName</strong> to the <strong>@Model.Role</strong>'s Portal!
    </div>

    <ul class="nav nav-tabs mb-3 flex-nowrap" role="tablist">
    <li class="nav-item">
        <a class="nav-link @(activeTab == "manage" || activeTab == "cancel" ? "active" : "")" href="?tab=manage">Manage Reservations</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(activeTab == "scores" ? "active" : "")" href="?tab=scores">Scorecard Review</a>
    </li>
    @if (Model.Role == "Committee" || Model.Role == "Admin")
    {
        <li class="nav-item">
            <a class="nav-link @(activeTab == "members" ? "active" : "")" href="?tab=members">Member Applications</a>
        </li>
    }
    @if (Model.Role == "Admin")
    {
        <li class="nav-item">
            <a class="nav-link @(activeTab == "standing" ? "active" : "")" href="?tab=standing">Manage Standing Reservations</a>
        </li>
    }
</ul>

<!-- Sub-tabs for Manage Reservations -->
@if (activeTab == "manage" || activeTab == "cancel")
{
    <div class="sub-tabs">
        <a class="sub-tab @(activeTab == "manage" ? "selected" : "")" href="?tab=manage">All Reservations</a>
        <a class="sub-tab @(activeTab == "cancel" ? "selected" : "")" href="?tab=cancel">Tee Time Cancellations</a>
    </div>
}

<!-- Only show sub-tabs for standing when on the standing tab -->
@if (activeTab == "standing")
{
    var subTab = HttpContext.Request.Query["subtab"].ToString();
    <div class="sub-tabs">
        <a class="sub-tab @(string.IsNullOrEmpty(subTab) || subTab == "requests" ? "selected" : "")" href="?tab=standing&subtab=requests">Standing Requests</a>
        <a class="sub-tab @(subTab == "cancellations" ? "selected" : "")" href="?tab=standing&subtab=cancellations">Standing Cancellations</a>
    </div>
}

    <div class="tab-content">
        @if (activeTab == "manage")
        {
            <div class="tab-pane fade show active">
                <h4>All Reservations</h4>
                @Html.AntiForgeryToken()
                @await Html.PartialAsync("~/Pages/Shared/_ManageReservationsPartial.cshtml")
            </div>
        }

        @if (activeTab == "cancel")
        {
            <div class="tab-pane fade show active">
                <h4 class="text-center mb-4">Tee Time Cancellation Requests</h4>
                @Html.AntiForgeryToken()
                @if (Model.CancellationRequests?.Count > 0)
                {
                    <div class="container-fluid">
                        <div class="row justify-content-center">
                            <div class="col-lg-10 col-xl-8">
                                @foreach (var t in Model.CancellationRequests)
                                {
                                    <div class="card mb-3 shadow-sm">
                                        <div class="card-body">
                                            <div class="row align-items-center">
                                                <div class="col-md-8">
                                                    <h6 class="card-title mb-2">
                                                        <span class="badge badge-primary">Tee Time #@t.TeeTimeID</span>
                                                    </h6>
                                                    <p class="card-text mb-1">
                                                        <strong>📅 Date:</strong> @t.Date.ToString("MMMM dd, yyyy")
                                                    </p>
                                                    <p class="card-text mb-1">
                                                        <strong>🕐 Start Time:</strong> @t.StartTime.ToString(@"h\:mm")
                                                    </p>
                                                    <p class="card-text mb-0">
                                                        <strong>👤 Requested by:</strong> @(Model.MemberNames.TryGetValue(t.MemberID, out var memberName) ? memberName : $"Member #{t.MemberID}")
                                                    </p>
                                                </div>
                                                <div class="col-md-4 text-right">
                                                    <div class="d-flex justify-content-end">
                                                        <button type="button" class="btn btn-success btn-sm px-3 mr-2" onclick="cancelTeeTime(@t.TeeTimeID)">
                                                            ✅ Approve
                                                        </button>
                                                        <button type="button" class="btn btn-danger btn-sm px-3" onclick="denyCancellation(@t.TeeTimeID)">
                                                            ❌ Deny
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="text-muted">
                            <i class="fas fa-inbox fa-3x mb-3"></i>
                            <p class="lead">No cancellation requests at this time.</p>
                        </div>
                    </div>
                }
            </div>
        }

        @if (activeTab == "scores")
        {
            <div class="tab-pane fade show active">
                <h4>Scorecard Review</h4>
                @if (Model.AllTeeTimes?.Count > 0)
                {
                    <form method="post" asp-page-handler="SearchTeeTime" class="form-inline mb-3">
                        <input type="text" name="TeeTimeSearchTerm" value="@Model.TeeTimeSearchTerm" class="form-control mr-2 mb-2" placeholder="Search by Tee Time ID" style="max-width: 200px;" />
                        <button type="submit" class="btn btn-primary mb-2">Search</button>
                    </form>

                    <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                        <div id="scorecardContainer" style="width:100%; max-width:100%; overflow-x:hidden;">
                            <table class="table table-sm table-bordered scorecard-ultra-compact" style="background: #fff; font-size:0.6rem; width:100%; max-width:100%; table-layout:fixed;">
                                <thead class="thead-dark">
                                    <tr>
                                        <th class="text-center col-id">Tee Time ID</th>
                                        <th class="text-center col-date">Date</th>
                                        <th class="text-center col-start">Start Time</th>
                                        <th class="text-center col-players">Players</th>
                                        <th class="text-center col-actions">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tee in Model.FilteredTeeTimes)
                                    {
                                        var players = Model.GetPlayersByTeeTimeID(tee.TeeTimeID);
                                        <tr data-ttid="@tee.TeeTimeID">
                                            <td class="text-center" style="padding:1px 2px; overflow:hidden; white-space:nowrap;">@tee.TeeTimeID</td>
                                            <td class="text-center" style="padding:1px 2px; overflow:hidden; white-space:nowrap;">@tee.Date.ToString("M/d")</td>
                                            <td class="text-center" style="padding:1px 2px; overflow:hidden; white-space:nowrap;">@tee.StartTime.ToString("h\\:mm")</td>
                                            <td class="text-center" style="padding:1px 2px; overflow:hidden; white-space:nowrap;">
                                                @if (players != null && players.Any())
                                                {
                                                    var shownPlayers = players.Take(2).ToList();
                                                    var names = string.Join(", ", shownPlayers.Select(p => $"{p.FirstName} {p.LastName}"));
                                                    @names
                                                    if (players.Count > 2)
                                                    {
                                                        <span style="font-size:0.55em;"> +@((players.Count - 2)) more</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted" style="font-size:0.55em;">-</span>
                                                }
                                            </td>
                                            <td class="text-center col-actions" style="padding:1px 2px; overflow:hidden; white-space:nowrap;">
                                                <button type="button" class="btn btn-primary btn-sm view-players-btn" onclick="loadPlayers(@tee.TeeTimeID)">View Players</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div id="playerListContainer" class="mt-4"></div>
                }
                else
                {
                    <p class="text-muted">No tee times available for scorecard review.</p>
                }
            </div>
        }

        @if (activeTab == "members")
        {
            <div class="tab-pane fade show active">
                <h4>Pending Member Applications</h4>
                @if (Model.PendingApplications?.Count > 0)
                {
                    <div class="d-flex justify-content-center">
                        <ul class="list-group w-auto">
                            @foreach (var a in Model.PendingApplications)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                    @a.FirstName @a.LastName (Email: @a.Email)
                                    <a asp-page="/EmployeeViewApplication" asp-route-ApplicationID="@a.ApplicationID" class="btn btn-info btn-sm mt-2 mt-md-0">
                                        Review
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <p class="text-muted">No member applications pending.</p>
                }
            </div>
        }

        @if (activeTab == "standing")
        {
            var subTab = HttpContext.Request.Query["subtab"].ToString();
            <div class="tab-pane fade show active">
                <h4>Standing Tee Management</h4>
                <div class="tab-content border p-3 bg-white rounded shadow-sm">
                    @* Only show the content for the selected sub-tab, not duplicate tabs *@
                    @if (string.IsNullOrEmpty(subTab) || subTab == "requests")
                    {
                        @if (Model.StandingTeeTimeRequests?.Count > 0)
                        {
                            <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                                <table class="table table-bordered table-hover table-sm" style="background: #fff;">
                                    <thead style="background: #343a40; color: #fff;">
                                        <tr>
                                            <th style="width: 80px;">Member ID</th>
                                            <th style="width: 100px;">Day</th>
                                            <th style="width: 120px;">Time</th>
                                            <th style="width: 180px;">Date Range</th>
                                            <th style="width: 180px;">Players</th>
                                            <th style="width: 120px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var r in Model.StandingTeeTimeRequests)
                                        {
                                            <tr>
                                                <td>@r.MemberID</td>
                                                <td>@r.RequestedDayOfWeek</td>
                                                <td>@r.RequestedStartTime - @r.RequestedEndTime</td>
                                                <td>@r.StartDate.ToShortDateString() - @r.EndDate.ToShortDateString()</td>
                                                <td>
                                                    @if (r.AdditionalPlayer1ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 1: @r.AdditionalPlayer1ID</span>
                                                    }
                                                    @if (r.AdditionalPlayer2ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 2: @r.AdditionalPlayer2ID</span>
                                                    }
                                                    @if (r.AdditionalPlayer3ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 3: @r.AdditionalPlayer3ID</span>
                                                    }
                                                </td>
                                                <td class="text-center">
                                                    <button type="button" class="btn btn-success btn-sm px-3 mx-1" style="min-width: 70px;" onclick="approveStandingRequest(@r.RequestID)">Approve</button>
                                                    <button type="button" class="btn btn-danger btn-sm px-3 mx-1" style="min-width: 70px;" onclick="denyStandingRequest(@r.RequestID)">Deny</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <span class="text-muted">No standing requests pending.</span>
                            </div>
                        }
                    }
                    else if (subTab == "cancellations")
                    {
                        @if (Model.StandingCancellationRequests?.Count > 0)
                        {
                            <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                                <table class="table table-bordered table-hover table-sm" style="background: #fff;">
                                    <thead style="background: #343a40; color: #fff;">
                                        <tr>
                                            <th style="width: 80px;">Member ID</th>
                                            <th style="width: 100px;">Day</th>
                                            <th style="width: 120px;">Time</th>
                                            <th style="width: 180px;">Date Range</th>
                                            <th style="width: 180px;">Players</th>
                                            <th style="width: 120px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var r in Model.StandingCancellationRequests)
                                        {
                                            <tr>
                                                <td>@r.MemberID</td>
                                                <td>@r.RequestedDayOfWeek</td>
                                                <td>@r.RequestedStartTime - @r.RequestedEndTime</td>
                                                <td>@r.StartDate.ToShortDateString() - @r.EndDate.ToShortDateString()</td>
                                                <td>
                                                    @if (r.AdditionalPlayer1ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 1: @r.AdditionalPlayer1ID</span>
                                                    }
                                                    @if (r.AdditionalPlayer2ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 2: @r.AdditionalPlayer2ID</span>
                                                    }
                                                    @if (r.AdditionalPlayer3ID.HasValue)
                                                    {
                                                        <span class="badge badge-info">Player 3: @r.AdditionalPlayer3ID</span>
                                                    }
                                                </td>
                                                <td class="text-center">
                                                    <button type="button" class="btn btn-success btn-sm px-3 mx-1" style="min-width: 70px;" onclick="approveStandingCancellation(@r.RequestID)">Approve</button>
                                                    <button type="button" class="btn btn-danger btn-sm px-3 mx-1" style="min-width: 70px;" onclick="denyStandingCancellation(@r.RequestID)">Deny</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <span class="text-muted">No standing cancellations pending.</span>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <style>
        .btn-compact {
            padding: 0.25rem 0.4rem;
            font-size: 0.75rem;
            line-height: 1.2;
            white-space: nowrap;
            min-width: 60px;
        }
        .tab-content {
            position: relative;
            min-height: 120px;
        }
        .tab-pane {
            opacity: 0;
            transition: opacity 0.35s cubic-bezier(.4,0,.2,1);
            pointer-events: none;
            position: absolute;
            width: 100%;
        }
        .tab-pane.show.active {
            opacity: 1;
            pointer-events: auto;
            position: relative;
            z-index: 1;
        }
        .scorecard-container {
            background: #f8f9fa;
            border-radius: 0.375rem;
            padding: 1rem;
        }
        .scorecard-item {
            border: 1px solid #dee2e6;
            transition: all 0.2s ease;
        }
        .scorecard-item:hover {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            border-color: #007bff;
        }
        .player-names {
            font-size: 0.85rem;
            line-height: 1.2;
        }
        .btn-group .btn {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
        .badge-sm {
            font-size: 0.55rem;
            padding: 0.12em 0.25em;
        }
        #scorecardContainer {
            width: 100%;
            max-width: 100%;
            overflow-x: hidden !important;
        }
        .scorecard-ultra-compact {
            width: 100% !important;
            max-width: none !important;
            table-layout: auto !important;
        }
        .scorecard-ultra-compact th,
        .scorecard-ultra-compact td {
            padding: 2px 4px !important;
            font-size: 0.6rem !important;
            text-align: center;
            vertical-align: middle;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            height: 22px !important;
        }
        .view-players-btn {
            font-size: 0.6rem !important;
            padding: 0.1rem 0.3rem !important;
            min-width: unset !important;
            width: auto !important;
            white-space: nowrap !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
            display: inline-block !important;
        }
        .player-list-compact {
            max-width: 55px;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 0.65rem;
        }
        .container {
            max-width: 1800px;
            margin-left: auto;
            margin-right: auto;
            width: 100%;
        }
    </style>
    <script>
        // Inject basePath into JS from Razor
        const basePath = "@basePath";

        // Fade-in effect for tab content
        document.addEventListener('DOMContentLoaded', function () {
            var tabLinks = document.querySelectorAll('.nav-link, .sub-tab');
            tabLinks.forEach(function (tab) {
                tab.addEventListener('click', function () {
                    var tabContent = document.querySelector('.tab-content');
                    if (tabContent) {
                        tabContent.classList.remove('fade-in');
                        void tabContent.offsetWidth;
                        tabContent.classList.add('fade-in');
                    }
                    // Smooth scroll to top
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            });
        });
    </script>
    <style>
        .tab-content.fade-in {
            animation: fadeInTab 0.35s cubic-bezier(.4,0,.2,1);
        }
    </style>
    @if (Model.ScrolledToPlayers)
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const container = document.getElementById("scorecardContainer");
                const targetRow = container.querySelector(`tr[data-ttid="@Model.TeeTimeID"]`);
                if (container && targetRow) {
                    container.scrollTop = targetRow.offsetTop - (container.clientHeight / 2) + (targetRow.clientHeight / 2);
                }
            });
        </script>
    }
    <script>
        function loadPlayers(teeTimeID) {
            fetch(basePath + '/EmployeePortal?handler=PlayersAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ teeTimeId: teeTimeID })
            })
            .then(res => res.text())
            .then(html => {
                document.getElementById('playerListContainer').innerHTML = html;
                setTimeout(function() {
                    var playerList = document.getElementById('playerListContainer');
                    if (playerList) {
                        playerList.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                }, 100);
            });
        }
        function cancelTeeTime(teeTimeID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=CancelTeeTime', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `TeeTimeID=${teeTimeID}`
            })
            .then(() => window.location.reload());
        }
        function denyCancellation(teeTimeID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=DenyCancellation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `TeeTimeID=${teeTimeID}`
            })
            .then(() => window.location.reload());
        }
        function approveStandingRequest(requestID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=ApproveStandingRequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `RequestID=${requestID}`
            })
            .then(() => window.location.reload());
        }
        function denyStandingRequest(requestID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=DenyStandingRequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `RequestID=${requestID}`
            })
            .then(() => window.location.reload());
        }
        function approveStandingCancellation(requestID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=ApproveStandingCancellation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `RequestID=${requestID}`
            })
            .then(() => window.location.reload());
        }
        function denyStandingCancellation(requestID) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(basePath + '/EmployeePortal?handler=DenyStandingCancellation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `RequestID=${requestID}`
            })
            .then(() => window.location.reload());
        }
    </script>
}
